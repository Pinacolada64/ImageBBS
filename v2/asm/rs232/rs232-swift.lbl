; assemble with casm 4.0 beta
{uses:..\equates-2_0.lbl}

; from "fast assembler":
; for pass=1 to 3:org $0800,-(pass=3),8,"@:ml.rs232/swift"

; gets relocated when LOADed and &,16,1 is issued
orig $0800
{asm}
; unused:
; baudof = $0299 ; $299-$29a: Time Required to Send a Bit

; Location Range: 667-670 ($29B-$29E)
; Byte Indices to the Beginning and End of Receive and Transmit Buffers

; ridbe and ridbs are already defined in equates-2_0.lbl
; ridbe	= $029b ; RS-232: Index to End of Receive Buffer
; ridbs	= $029c ; RS-232: Index to Start of Receive Buffer
rodbs	= $029d ; RS-232: Index to Start of Transmit Buffer
rodbe	= $029e ; RS-232: Index to End of Transmit Buffer

; unused:
; enabl	= $02a1 ; RS-232 Interrupts Enabled

; SwiftLink/Turbo232
io1	= $de00 ; Base Address of SwiftLink/Turbo232
io2	= $df00 ; alternate address, not used here
port	= io1
slStatus  = port+1 ; SL/T232 status register
slCommand = port+2 ; SL/T232 command register
slControl = port+3 ; SL/T232 control register

; Kernal routines:
findfn	= $f30f ; Find the File (lfn .x) in the Logical File Table
devnum	= $f31f ; Set Current Logical File, Device #, and Secondary Address
		; http://unusedino.de/ec64/technical/aay/c64/romf31f.htm
nofile	= $f701 ; Output I/O Error Messages: 'FILE NOT OPEN'
rstkey	= $fe56 ; check for an autostart cartridge?
		; http://unusedino.de/ec64/technical/aay/c64/romfe43.htm
norest	= $fe72 ; set up rs232 timing?
		; http://unusedino.de/ec64/technical/aay/c64/romfe66.htm
; unused:
; nmiexit = $febc

comint0	= {%:00001010} ; nmi off
comint1	= {%:00001001} ; rxd on
comint2	= {%:00000101} ; txd/rxd
comdtr0	= {%:00001000} ; dtr off
comrts0	= {%:00000001} ; rts off

statdcd	= {%:01000000} ; carrier
statrxd	= {%:00001000} ; receive
stattxd	= {%:00010000} ; transmit
statint	= {%:10000000} ; nmi

imagecd0= {%:00000000} ; none
imagecd1= {%:00010000} ; carrier

first:
xx00:
	jmp setup
xx03:
	jmp inable
xx06:
	jmp disabl
xx09:
; forward branch (>) to local (@) "rsget" label instead of the global one
; defined in equates-2_0.lbl:
	jmp >@rsget
xx0c:
	jmp >@rsout
xx0f:
	jmp setbaud

bauds:
	byte {%:00010101} ; 0300
	byte {%:00010110} ; 0600
	byte {%:00010111} ; 1200
	byte {%:00011000} ; 2400
	byte {%:00011010} ; 4800
	byte {%:00011100} ; 9600
	byte {%:00011110} ;19200
	byte {%:00011111} ;38400

shcomm:
; saves SwiftLink command register
	byte comint1

vectbl:
oldnmi:
	byte $18
	word nmi64
oldopn:
	byte $1a
	word nopen
oldcls:
	byte $1c
	word nclose
oldchk:
	byte $1e
	word nchkin
oldcho:
	byte $20
	word nchkout
oldclr:
	byte $22
	word nclrch
oldchr:
	byte $24
	word nchrin
; TODO: try uncommenting this
oldout:
	byte $26
	word nchrout
oldget:
	byte $2a
	word ngetin
	byte 0

setup:
; TODO: multiple people have mentioned VICE at startup has an RS232 IRQ pending
; which needs to be acknowledged, so do this. This does not happen on real hardware.

	lda #comint0	; turn SwiftLink NMIs off
	sta slCommand
	ldx #0
	lda #3
	sta 21		; <LINNUM, temp storage
setup1:
	lda vectbl,x
	beq setup3
	sta 20		; >LINNUM, temp storage
	lda #$4c
	sta vectbl,x
	inx
	ldy #0
setup2:
	lda vectbl,x
	pha
	lda (20),y
	sta vectbl,x
	pla
	sta (20),y
	iny
	inx
	cpy #2
	bcc setup2
	jmp setup1
setup3:
	lda #0
	sta slStatus
	lda #comint1
	sta shcomm
	jsr inable
	jsr setcarr
	lda #2
	jmp setbaud

setcarr:
; set carrier high
	ldy #imagecd1
	lda slStatus
	and #statdcd
	beq setcarr1
	ldy #imagecd0
setcarr1:
	sty carrier
	rts
;
; ** nmi routine
;
nmi64:
	pha
	txa
	pha
	tya
	pha
	cld
	lda slStatus
	and #statint
	beq notacia
	lda #comint0
	sta slCommand
	jsr rsint
	lda shcomm
	sta slCommand
	pla
	tay
	pla
	tax
	pla
	rti
;
notacia:
	ldy #0
	jmp rstkey
;
; ** check for character
;
rsint:
	jsr setcarr
	lda slStatus
	and #statrxd
	beq rsint2
	lda port
	ldy ridbe
	sta ribuf,y
	iny
	bpl rsint1
	ldy #0
rsint1:
	sty ridbe
	tya
	sec
	sbc ridbs
	and #127
	cmp #120
	bcc rsint2
	lda #comrts0
	sta slCommand
;
; ** check transmit
;
rsint2:
	lda slStatus
	and #stattxd
	beq rsint4
	lda shcomm
	cmp #comint1
	beq rsint4
	ldy rodbs
	lda robuf,y
	sta port
	iny
	bpl rsint3
	ldy #0
rsint3:
	sty rodbs
	cpy rodbe
	bne rsint4
	lda #comint1
	sta shcomm
rsint4:
	rts
;
; ** disable nmi
;
disabl:
	php
	pha
	lda #comint0
	sta slCommand
	pla
	plp
	rts
;
; ** enable nmi
;
inable:
	php
	pha
	lda shcomm
	sta slCommand
	pla
	plp
	rts
;
; ** rs232 bsout
;
rsout0:
	jsr rsint
	jmp rsout1
@rsout:
	sta $9e
	sty $97
	lda #comint0
	sta slCommand
rsout1:
	lda $9e
	ldy rodbe
	sta robuf,y
	iny
	bpl rsout2
	ldy #0
rsout2:
	cpy rodbs
	beq rsout0
	sty rodbe
	lda #comint2
	sta shcomm
rsout4:
	lda shcomm
	sta slCommand
	jmp ret1

xtmp:
	byte 0

nosuch:
	jmp nofile

nchkin:
	stx xtmp
	jsr findfn
	bne nosuch
	jsr devnum
	ldx xtmp
	lda $ba
	cmp #2
	bne nchkin1
	sta $99
	clc
	jmp inable

nchkin1:
	jsr disabl
	jsr oldchk
	jmp inable

nchkout:
	stx xtmp
	jsr findfn
	bne nosuch
	jsr devnum
	ldx xtmp
	lda $ba
	cmp #2
	bne nchkout1
	sta $9a
	clc
	jmp inable

nchkout1:
	jsr disabl
	jsr oldcho
	jmp inable

ngetin:
	pha
	lda $9a
	cmp #2
	bne notget
	pla
;
; ** rs232 getin
;
@rsget:
	sta $9e
	sty $97
	ldy ridbs
	cpy ridbe
	beq ret2
	lda ribuf,y
	sta $9e
	iny
	bpl rsget1
	ldy #0
rsget1:
	sty ridbs
	lda ridbe
	sec
	sbc ridbs
	and #127
	cmp #100
	bcs ret1
	lda shcomm
	sta slCommand
ret1:
	clc
ret2:
	ldy $97
	lda $9e
	rts

notget:
	pla
	jsr disabl
	jsr oldget
	jmp inable

setbaud:
; enter with baud rate in .a
	cmp #254
	bcc setbaud3
	beq setbaud1
	lda shcomm
	jmp setbaud2
setbaud1:
	lda #comdtr0
setbaud2:
	sta slCommand
	rts
setbaud3:
	and #7
	tay
	lda bauds,y
	sta slControl
	rts

; TODO: try uncommenting this
nchrout:
	jsr disabl
	jsr oldout
	jmp inable

nopen:
	jsr disabl
	jsr oldopn
	jmp inable

nclose:
	jsr disabl
	jsr oldcls
	jmp inable

nclrch:
	jsr disabl
	jsr oldclr
	jmp inable

nchrin:
	jsr disabl
	jsr oldchr
	jmp inable
{endasm}
