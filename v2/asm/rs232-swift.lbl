; 5/Jun/2016 21:43 - assemble with casm 4.0 beta

; for pass=1 to 3:org $0800,-(pass=3),8,"@:ml.rs232/swift"

{include:equates-2_0.lbl}
orig $0800
	baudof	= $299
	rodbe	= $29e
	rodbs	= $29d
;	ridbe	= $29b - defined in equates-2_0.lbl
;	ridbs	= $29c - defined in equates-2_0.lbl
	enabl	= $2a1

	rstkey	= $fe56
	norest	= $fe72
	nmiexit	= $febc
	findfn	= $f30f
	devnum	= $f31f
	nofile	= $f701

	io1	= $de00
	io2	= $df00
	port	= io1
	sl_stat	= port+1
	command	= port+2
	control	= port+3

; SwiftLink commands:
	comint0	= {%:00001010} ; nmi off
	comint1	= {%:00001001} ; rxd on
	comint2	= {%:00000101} ; txd/rxd
	comdtr0	= {%:00001000} ; dtr off
	comrts0	= {%:00000001} ; rts off

; SwiftLink statuses:
	statdcd	= {%:01000000} ; carrier
	statrxd	= {%:00001000} ; receive
	stattxd	= {%:00010000} ; transmit
	statint	= {%:10000000} ; nmi

; Carrier Detect:
	imagecd0= {%:00000000} ; none
	imagecd1= {%:00010000} ; carrier

first:
xx00:	jmp setup
xx03:	jmp inable
xx06:	jmp disabl
xx09:	jmp _rsget ; renamed to _rsget - rns (rsget defined in equates-2_0.lbl)
xx0c:	jmp _rsout ; renamed to _rsout - rns (rsout defined in equates-2_0.lbl)
xx0f:	jmp setbaud

bauds:
	byte {%:00010101} ; 0300
	byte {%:00010110} ; 0600
	byte {%:00010111} ; 1200
	byte {%:00011000} ; 2400
	byte {%:00011010} ; 4800
	byte {%:00011100} ; 9600
	byte {%:00011110} ;19200
	byte {%:00011111} ;38400

shcomm:
	byte comint1

vectbl:
oldnmi:
	byte $18
	word nmi64
oldopn:
	byte $1a
	word nopen
oldcls:
	byte $1c
	word nclose
oldchk:
	byte $1e
	word nchkin
oldcho:
	byte $20
	word nchkout
oldclr:
	byte $22
	word nclrch
oldchr:
	byte $24
	word nchrin
oldout:
	byte $26
	word nchrout
oldget:
	byte $2a
	word ngetin
	byte 0

setup:
	lda #comint0	; interrupts off?
	sta command
	ldx #0
	lda #3
	sta 21
setup1:
	lda vectbl,x
	beq setup3
	sta 20
	lda #$4c
	sta vectbl,x
	inx
	ldy #0
setup2:
	lda vectbl,x
	pha
	lda (20),y
	sta vectbl,x
	pla
	sta (20),y
	iny
	inx
	cpy #2
	bcc setup2
	jmp setup1
setup3:
	lda #0
	sta sl_stat	; reset 6551
	lda #comint1	; rxd on
	sta shcomm
	jsr inable
	jsr setcarr

; 		.------------------------- 0 = one stop bit
; 		:
; 		:.-------------------- word length, bits 6-7
; 		::.------------------- 0 = eight bit word
; 		:::
; 		:::.-------------- clock source, 1 = internal generator
; 		::::
; 		::::.----- baud
; 		:::::.---- rate
; 		::::::.--- bits
; 		:::::::.-- 0-3
;	bit	76543210
	lda #{%:00011010}
	sta control

; The ACIA "command" register controls the parity, echo mode, transmit and
; receive interrupt enabling, hardware "BRK", and (indirectly) the "RTS"
; and "DTR" lines. The value below sets the ACIA for no parity check,
; no echo, disables transmit interrupts, and enables receive interrupts
; (RTS and DTR low).

; 		.------------------------- parity control,
; 		:.------------------------ bits 5-7
; 		::.----------------------- 000 = no parity
; 		:::
; 		:::.----------------- echo mode, 0 = normal (no echo)
; 		::::
; 		::::.------------ transmit interrupt control, bits 2-3
; 		:::::.----------- 10 = xmit interrupt off, RTS low
; 		::::::
; 		::::::.------- receive interrupt control, 0 = enabled
; 		:::::::
; 		:::::::.--- DTR control, 1 = DTR low
;	bit	76543210
;	lda #{%:00001001} ; no parity
	lda #{%:11101001} ; space parity
	sta command

	lda #2		; 1200 baud
	jmp setbaud

setcarr:
	ldy #imagecd1
	lda sl_stat
	and #statdcd
	beq setcarr1
	ldy #imagecd0
setcarr1:
	sty carrier
	rts
;
; ** nmi routine
;
nmi64:
	pha
	txa
	pha
	tya
	pha
	cld
	lda sl_stat
	and #statint
	beq notacia
	lda #comint0
	sta command
	jsr rsint
	lda shcomm
	sta command
	pla
	tay
	pla
	tax
	pla
	rti

notacia:
	ldy #0
	jmp rstkey
;
; ** check for character
;
rsint:
	jsr setcarr
	lda sl_stat
	and #statrxd
	beq rsint2
	lda port
	ldy ridbe
	sta ribuf,y
	iny
	bpl rsint1
	ldy #0
rsint1:
	sty ridbe
	tya
	sec
	sbc ridbs
	and #127
	cmp #120
	bcc rsint2
	lda #comrts0
	sta command
;
; ** check transmit
;
rsint2:
	lda sl_stat
	and #stattxd
	beq rsint4
	lda shcomm
	cmp #comint1
	beq rsint4
	ldy rodbs
	lda robuf,y
	sta port
	iny
	bpl rsint3
	ldy #0
rsint3:
	sty rodbs
	cpy rodbe
	bne rsint4
	lda #comint1
	sta shcomm
rsint4:
	rts
;
; ** disable nmi
;
disabl:
	php
	pha
	lda #comint0
	sta command
	pla
	plp
	rts
;
; ** enable nmi
;
inable:
	php
	pha
	lda shcomm
	sta command
	pla
	plp
	rts
;
; ** rs232 bsout
;
rsout0:
	jsr rsint
	jmp rsout1
_rsout:
	sta $9e
	sty $97
	lda #comint0
	sta command
rsout1:
	lda $9e
	ldy rodbe
	sta robuf,y
	iny
	bpl rsout2
	ldy #0
rsout2:
	cpy rodbs
	beq rsout0
	sty rodbe
	lda #comint2
	sta shcomm
rsout4:
	lda shcomm
	sta command
	jmp ret1

xtmp:
	byte 0

nosuch:
	jmp nofile

nchkin:
	stx xtmp
	jsr findfn
	bne nosuch
	jsr devnum
	ldx xtmp
	lda $ba
	cmp #2
	bne nchkin1
	sta $99
	clc
	jmp inable

nchkin1:
	jsr disabl
	jsr oldchk
	jmp inable

nchkout:
	stx xtmp
	jsr findfn
	bne nosuch
	jsr devnum
	ldx xtmp
	lda $ba
	cmp #2
	bne nchkout1
	sta $9a
	clc
	jmp inable

nchkout1:
	jsr disabl
	jsr oldcho
	jmp inable

ngetin:
	pha
	lda $9a
	cmp #2
	bne notget
	pla
;
; ** rs232 getin
;
_rsget:
	sta $9e
	sty $97
	ldy ridbs
	cpy ridbe
	beq ret2
	lda ribuf,y
	sta $9e
	iny
	bpl rsget1
	ldy #0
rsget1:
	sty ridbs
	lda ridbe
	sec
	sbc ridbs
	and #127
	cmp #100
	bcs ret1
	lda shcomm
	sta command
ret1:
	clc
ret2:
	ldy $97
	lda $9e
	rts

notget:
	pla
	jsr disabl
	jsr oldget
	jmp inable

setbaud:
	cmp #254
	bcc setbaud3
	beq setbaud1
	lda shcomm
	jmp setbaud2
setbaud1:
	lda #comdtr0
setbaud2:
	sta command
	rts
setbaud3:
	and #7
	tay
	lda bauds,y
	sta control
	rts

nchrout:
	jsr disabl
	jsr oldout
	jmp inable

nopen:
	jsr disabl
	jsr oldopn
	jmp inable

nclose:
	jsr disabl
	jsr oldcls
	jmp inable

nclrch:
	jsr disabl
	jsr oldclr
	jmp inable

nchrin:
	jsr disabl
	jsr oldchr
	jmp inable
